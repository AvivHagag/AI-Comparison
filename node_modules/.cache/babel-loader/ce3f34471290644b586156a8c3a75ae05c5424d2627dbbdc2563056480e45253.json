{"ast":null,"code":"var _jsxFileName = \"/Users/avivhagag/Documents/React/AI- Comparison/Project copy/src/Report.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { Val } from './Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Report = links => {\n  _s();\n  const [data, setData] = useState('Loading....');\n  const json = JSON.stringify(links);\n  const [images, setImages] = useState([]);\n  console.log(json);\n  useEffect(() => {\n    axios.post('http://127.0.0.1:5000/AI/answer', json, {\n      params: {\n        num: Val\n      }\n    }).then(response => {\n      setData(response.data);\n      console.log(response);\n      return;\n    }).catch(error => {\n      console.error(error);\n    });\n    const fetchData = async () => {\n      try {\n        const response = await axios.post('http://127.0.0.1:5000/AI/answer', {\n          links\n        });\n        const products = response.data.products; // Assuming the response contains products data\n        const productImages = await Promise.all(products.map(async product => {\n          const imageUrl = await fetchAmazonImage(product.link);\n          return imageUrl;\n        }));\n        setImages(productImages);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, [links]);\n\n  // Function to convert new lines to HTML line breaks\n  const formatDataWithNewlines = text => {\n    return {\n      __html: text.replace(/\\n/g, '<br>')\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Report\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), data === 'Loading....' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Use dangerouslySetInnerHTML to render the data with new lines\n    _jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: formatDataWithNewlines(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(Report, \"7ivyIPpMnBBUWxY6YBZklaQEytE=\");\n_c = Report;\nexport default Report;\nvar _c;\n$RefreshReg$(_c, \"Report\");","map":{"version":3,"names":["useEffect","useState","axios","Val","jsxDEV","_jsxDEV","Report","links","_s","data","setData","json","JSON","stringify","images","setImages","console","log","post","params","num","then","response","catch","error","fetchData","products","productImages","Promise","all","map","product","imageUrl","fetchAmazonImage","link","formatDataWithNewlines","text","__html","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","_c","$RefreshReg$"],"sources":["/Users/avivhagag/Documents/React/AI- Comparison/Project copy/src/Report.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport {Val} from './Home'\n\nconst Report = (links) => {\n  const [data, setData] = useState('Loading....');\n  const json = JSON.stringify(links);\n  const [images, setImages] = useState([]);\n  console.log(json);\n\n  useEffect(() => {\n    axios.post('http://127.0.0.1:5000/AI/answer',json, {\n      params: {\n        num: Val\n      }\n    })\n  .then(response => {\n    setData(response.data);\n    console.log(response);\n    return;\n  })\n  .catch(error => {\n    console.error(error);\n  });\n  const fetchData = async () => {\n    try {\n      const response = await axios.post('http://127.0.0.1:5000/AI/answer', { links });\n      const products = response.data.products; // Assuming the response contains products data\n      const productImages = await Promise.all(products.map(async (product) => {\n        const imageUrl = await fetchAmazonImage(product.link);\n        return imageUrl;\n      }));\n      setImages(productImages);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  fetchData();\n  }, [links]);\n\n  // Function to convert new lines to HTML line breaks\n  const formatDataWithNewlines = (text) => {\n    return { __html: text.replace(/\\n/g, '<br>') };\n  };\n\n  return (\n    <div className=\"Report\">\n      <h2>Report</h2>\n      <br />\n      {data === 'Loading....' ? (\n        <div>\n          <p>{data}</p>\n          <div className=\"loading-spinner\">\n            <div className=\"spinner\"></div>\n          </div>\n          {/* <img src={imageUrl} alt=\"Amazon product\" /> */}\n        </div>\n        \n      ) : (\n        // Use dangerouslySetInnerHTML to render the data with new lines\n        <p dangerouslySetInnerHTML={formatDataWithNewlines(data)}></p>\n      )}\n    </div>\n  );  \n  }\n   \n  export default Report;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}