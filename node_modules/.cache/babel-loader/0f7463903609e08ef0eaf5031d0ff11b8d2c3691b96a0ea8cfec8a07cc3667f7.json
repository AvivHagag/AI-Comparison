{"ast":null,"code":"var _jsxFileName = \"/Users/avivhagag/Documents/React/AI- Comparison/Project copy/src/Report.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { Val } from './Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Report = links => {\n  _s();\n  const [data, setData] = useState('Loading....');\n  const json = JSON.stringify(links);\n  const [images, setImages] = useState([]);\n  console.log(json);\n  useEffect(() => {\n    axios.post('http://127.0.0.1:5000/AI/answer', json, {\n      params: {\n        num: Val\n      }\n    }).then(response => {\n      setData(response.data);\n      console.log(response);\n      return;\n    }).catch(error => {\n      console.error(error);\n    });\n  }, [links]);\n\n  // Fetch Amazon images when component is rendered\n  const fetchAmazonImage = async link => {\n    const amazonCode = getAmazonCode(link);\n    if (amazonCode) {\n      const imageUrl = `https://images-na.ssl-images-amazon.com/images/I/${amazonCode}.jpg`;\n      return imageUrl;\n    }\n    return null;\n  };\n  const getAmazonCode = url => {\n    const matches = url.match(/dp\\/([0-9]+)/);\n    return matches && matches[1] ? matches[1] : null;\n  };\n  const fetchImages = async () => {\n    const imageUrls = await Promise.all(links.links.map(async link => {\n      const imageUrl = await fetchAmazonImage(link);\n      return imageUrl;\n    }));\n    setImages(imageUrls);\n  };\n  fetchImages();\n\n  // Function to convert new lines to HTML line breaks\n  const formatDataWithNewlines = text => {\n    return {\n      __html: text.replace(/\\n/g, '<br>')\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Report\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), data === 'Loading....' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Pics\",\n        children: images.map((image, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: image,\n          alt: \"Amazon product\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Use dangerouslySetInnerHTML to render the data with new lines\n    _jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: formatDataWithNewlines(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Report, \"7ivyIPpMnBBUWxY6YBZklaQEytE=\");\n_c = Report;\nexport default Report;\nvar _c;\n$RefreshReg$(_c, \"Report\");","map":{"version":3,"names":["useEffect","useState","axios","Val","jsxDEV","_jsxDEV","Report","links","_s","data","setData","json","JSON","stringify","images","setImages","console","log","post","params","num","then","response","catch","error","fetchAmazonImage","link","amazonCode","getAmazonCode","imageUrl","url","matches","match","fetchImages","imageUrls","Promise","all","map","formatDataWithNewlines","text","__html","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","image","index","src","alt","dangerouslySetInnerHTML","_c","$RefreshReg$"],"sources":["/Users/avivhagag/Documents/React/AI- Comparison/Project copy/src/Report.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport {Val} from './Home'\n\nconst Report = (links) => {\n  const [data, setData] = useState('Loading....');\n  const json = JSON.stringify(links);\n  const [images, setImages] = useState([]);\n  console.log(json);\n\n  useEffect(() => {\n    axios.post('http://127.0.0.1:5000/AI/answer',json, {\n      params: {\n        num: Val\n      }\n    })\n  .then(response => {\n    setData(response.data);\n    console.log(response);\n    return;\n  })\n  .catch(error => {\n    console.error(error);\n  });\n  }, [links]);\n\n    // Fetch Amazon images when component is rendered\n    const fetchAmazonImage = async (link) => {\n      const amazonCode = getAmazonCode(link);\n      if (amazonCode) {\n        const imageUrl = `https://images-na.ssl-images-amazon.com/images/I/${amazonCode}.jpg`;\n        return imageUrl;\n      }\n      return null;\n    };\n  \n    const getAmazonCode = (url) => {\n      const matches = url.match(/dp\\/([0-9]+)/);\n      return matches && matches[1] ? matches[1] : null;\n    };\n  \n    const fetchImages = async () => {\n      const imageUrls = await Promise.all(links.links.map(async (link) => {\n        const imageUrl = await fetchAmazonImage(link);\n        return imageUrl;\n      }));\n      setImages(imageUrls);\n    };\n  \n    fetchImages();\n\n  // Function to convert new lines to HTML line breaks\n  const formatDataWithNewlines = (text) => {\n    return { __html: text.replace(/\\n/g, '<br>') };\n  };\n\n  return (\n    <div className=\"Report\">\n      <h2>Report</h2>\n      <br />\n      {data === 'Loading....' ? (\n        <div>\n          <p>{data}</p>\n          <div className=\"loading-spinner\">\n            <div className=\"spinner\"></div>\n          </div>\n          <div className=\"Pics\">\n            {images.map((image, index) => (\n              <img key={index} src={image} alt=\"Amazon product\" />\n            ))}\n          </div>\n        </div>\n        \n      ) : (\n        // Use dangerouslySetInnerHTML to render the data with new lines\n        <p dangerouslySetInnerHTML={formatDataWithNewlines(data)}></p>\n      )}\n    </div>\n  );  \n  }\n   \n  export default Report;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}