{"ast":null,"code":"var _jsxFileName = \"/Users/avivhagag/Documents/React/AI- Comparison/Project copy/src/Report.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { Val } from './Home';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Report = links => {\n  _s();\n  const [data, setData] = useState('Loading....');\n  const json = JSON.stringify(links);\n  const imageUrl = `https://images-na.ssl-images-amazon.com/images/I/${code}.jpg`;\n  console.log(json);\n  const code = getAmazonCode(url);\n  useEffect(() => {\n    axios.post('http://127.0.0.1:5000/AI/answer', json, {\n      params: {\n        num: Val\n      }\n    }).then(response => {\n      setData(response.data);\n      console.log(response);\n      return;\n    }).catch(error => {\n      console.error(error);\n    });\n    const intervals = [];\n    links.forEach((link, index) => {\n      const interval = setInterval(() => {\n        const code = getAmazonCode(link);\n        const imageUrl = `https://images-na.ssl-images-amazon.com/images/I/${code}.jpg`;\n        setImages(prevImages => {\n          const newImages = [...prevImages];\n          newImages[index] = imageUrl;\n          return newImages;\n        });\n      }, 10000);\n      intervals.push(interval);\n    });\n    return () => {\n      intervals.forEach(interval => clearInterval(interval));\n    };\n  }, [links]);\n\n  // Function to convert new lines to HTML line breaks\n  const formatDataWithNewlines = text => {\n    return {\n      __html: text.replace(/\\n/g, '<br>')\n    };\n  };\n  const getAmazonCode = url => {\n    const matches = url.match(/dp\\/([0-9]+)/);\n    return matches ? matches[1] : null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Report\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Report\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), data === 'Loading....' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: \"Amazon product\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Use dangerouslySetInnerHTML to render the data with new lines\n    _jsxDEV(\"p\", {\n      dangerouslySetInnerHTML: formatDataWithNewlines(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(Report, \"OfMszjL75lbODPnGGx7kZ3CrJsY=\");\n_c = Report;\nexport default Report;\nvar _c;\n$RefreshReg$(_c, \"Report\");","map":{"version":3,"names":["useEffect","useState","axios","Val","jsxDEV","_jsxDEV","Report","links","_s","data","setData","json","JSON","stringify","imageUrl","code","console","log","getAmazonCode","url","post","params","num","then","response","catch","error","intervals","forEach","link","index","interval","setInterval","setImages","prevImages","newImages","push","clearInterval","formatDataWithNewlines","text","__html","replace","matches","match","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","dangerouslySetInnerHTML","_c","$RefreshReg$"],"sources":["/Users/avivhagag/Documents/React/AI- Comparison/Project copy/src/Report.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport {Val} from './Home'\n\nconst Report = (links) => {\n  const [data, setData] = useState('Loading....');\n  const json = JSON.stringify(links);\n  const imageUrl = `https://images-na.ssl-images-amazon.com/images/I/${code}.jpg`;\n  console.log(json);\n  const code = getAmazonCode(url);\n  useEffect(() => {\n    axios.post('http://127.0.0.1:5000/AI/answer',json, {\n      params: {\n        num: Val\n      }\n    })\n  .then(response => {\n    setData(response.data);\n    console.log(response);\n    return;\n  })\n  .catch(error => {\n    console.error(error);\n  });\n  const intervals = [];\n\n    links.forEach((link, index) => {\n      const interval = setInterval(() => {\n        const code = getAmazonCode(link);\n        const imageUrl = `https://images-na.ssl-images-amazon.com/images/I/${code}.jpg`;\n\n        setImages(prevImages => {\n          const newImages = [...prevImages];\n          newImages[index] = imageUrl;\n          return newImages;\n        });\n\n      }, 10000);\n      intervals.push(interval);\n    });\n\n    return () => {\n      intervals.forEach(interval => clearInterval(interval));\n    }\n\n  }, [links]);\n\n  // Function to convert new lines to HTML line breaks\n  const formatDataWithNewlines = (text) => {\n    return { __html: text.replace(/\\n/g, '<br>') };\n  };\n\n  const getAmazonCode = (url) => {\n    const matches = url.match(/dp\\/([0-9]+)/);\n    return matches ? matches[1] : null;\n  }\n  \n\n  return (\n    <div className=\"Report\">\n      <h2>Report</h2>\n      <br />\n      {data === 'Loading....' ? (\n        <div>\n          <p>{data}</p>\n          <div className=\"loading-spinner\">\n            <div className=\"spinner\"></div>\n          </div>\n          <img src={imageUrl} alt=\"Amazon product\" />\n        </div>\n        \n      ) : (\n        // Use dangerouslySetInnerHTML to render the data with new lines\n        <p dangerouslySetInnerHTML={formatDataWithNewlines(data)}></p>\n      )}\n    </div>\n  );  \n  }\n   \n  export default Report;"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAAQC,GAAG,QAAO,QAAQ;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,aAAa,CAAC;EAC/C,MAAMU,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;EAClC,MAAMO,QAAQ,GAAI,oDAAmDC,IAAK,MAAK;EAC/EC,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;EACjB,MAAMI,IAAI,GAAGG,aAAa,CAACC,GAAG,CAAC;EAC/BnB,SAAS,CAAC,MAAM;IACdE,KAAK,CAACkB,IAAI,CAAC,iCAAiC,EAACT,IAAI,EAAE;MACjDU,MAAM,EAAE;QACNC,GAAG,EAAEnB;MACP;IACF,CAAC,CAAC,CACHoB,IAAI,CAACC,QAAQ,IAAI;MAChBd,OAAO,CAACc,QAAQ,CAACf,IAAI,CAAC;MACtBO,OAAO,CAACC,GAAG,CAACO,QAAQ,CAAC;MACrB;IACF,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdV,OAAO,CAACU,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;IACF,MAAMC,SAAS,GAAG,EAAE;IAElBpB,KAAK,CAACqB,OAAO,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC7B,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjC,MAAMjB,IAAI,GAAGG,aAAa,CAACW,IAAI,CAAC;QAChC,MAAMf,QAAQ,GAAI,oDAAmDC,IAAK,MAAK;QAE/EkB,SAAS,CAACC,UAAU,IAAI;UACtB,MAAMC,SAAS,GAAG,CAAC,GAAGD,UAAU,CAAC;UACjCC,SAAS,CAACL,KAAK,CAAC,GAAGhB,QAAQ;UAC3B,OAAOqB,SAAS;QAClB,CAAC,CAAC;MAEJ,CAAC,EAAE,KAAK,CAAC;MACTR,SAAS,CAACS,IAAI,CAACL,QAAQ,CAAC;IAC1B,CAAC,CAAC;IAEF,OAAO,MAAM;MACXJ,SAAS,CAACC,OAAO,CAACG,QAAQ,IAAIM,aAAa,CAACN,QAAQ,CAAC,CAAC;IACxD,CAAC;EAEH,CAAC,EAAE,CAACxB,KAAK,CAAC,CAAC;;EAEX;EACA,MAAM+B,sBAAsB,GAAIC,IAAI,IAAK;IACvC,OAAO;MAAEC,MAAM,EAAED,IAAI,CAACE,OAAO,CAAC,KAAK,EAAE,MAAM;IAAE,CAAC;EAChD,CAAC;EAED,MAAMvB,aAAa,GAAIC,GAAG,IAAK;IAC7B,MAAMuB,OAAO,GAAGvB,GAAG,CAACwB,KAAK,CAAC,cAAc,CAAC;IACzC,OAAOD,OAAO,GAAGA,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;EACpC,CAAC;EAGD,oBACErC,OAAA;IAAKuC,SAAS,EAAC,QAAQ;IAAAC,QAAA,gBACrBxC,OAAA;MAAAwC,QAAA,EAAI;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACf5C,OAAA;MAAAyC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EACLxC,IAAI,KAAK,aAAa,gBACrBJ,OAAA;MAAAwC,QAAA,gBACExC,OAAA;QAAAwC,QAAA,EAAIpC;MAAI;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACb5C,OAAA;QAAKuC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC9BxC,OAAA;UAAKuC,SAAS,EAAC;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC,eACN5C,OAAA;QAAK6C,GAAG,EAAEpC,QAAS;QAACqC,GAAG,EAAC;MAAgB;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;IAAA;IAGN;IACA5C,OAAA;MAAG+C,uBAAuB,EAAEd,sBAAsB,CAAC7B,IAAI;IAAE;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAC9D;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAER,CAAC;AAAAzC,EAAA,CAzEGF,MAAM;AAAA+C,EAAA,GAAN/C,MAAM;AA2EV,eAAeA,MAAM;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}